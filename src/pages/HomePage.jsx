import { useEffect, useState } from "react";

import PropTypes from "prop-types";

import Form from "../components/Form";
import Container from "../components/utility/Container";
import Card from "../components/Card";

const RenderCards = ({ data, title }) => {
    if (data?.length > 0) {
        return data.map((item, index) => <Card key={item._id} {...item} index={index} />);
    }

    return <h2 className="text-2xl font-bold">{title}</h2>;
};

export default function HomePage() {
    const [searchText, setSearchText] = useState("");
    const [loading, setLoading] = useState(false);
    const [posts, setPosts] = useState(null);
    const [searchResults, setSearchResults] = useState(null);
    const [searchTimeout, setSearchTimeout] = useState(null);

    useEffect(() => {
        const fetchPosts = async () => {
            setLoading(true);

            try {
                const response = await fetch("https://ai-aaron-api.onrender.com/api/v1/posts", {
                    method: "GET",
                    headers: {
                        "Content-Type": "application/json",
                    },
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log("HomePage.jsx", result);
                    setPosts(result.posts.reverse());
                }
            } catch (error) {
                console.log(error);
            } finally {
                setLoading(false);
            }
        };

        fetchPosts();
    }, []);

    const handleSearchChange = (e) => {
        clearTimeout(searchTimeout);
        setSearchText(e.target.value);

        setSearchTimeout(
            setTimeout(() => {
                const filteredPosts = posts?.filter(
                    (post) =>
                        post.prompt.toLowerCase().includes(e.target.value.toLowerCase()) ||
                        post.name.toLowerCase().includes(e.target.value.toLowerCase())
                );
                setSearchResults(filteredPosts);
            }, 100)
        );
    };

    return (
        <Container className="h-[calc(100vh-255px)] mt-16">
            <div>
                <h1 className="text-6xl font-extrabold text-transparent bg-gradient-to-r from-accent via-teal-500 to-fuchsia-500 bg-clip-text">
                    Community Showcase
                </h1>
                <p className="w-3/4 mt-5 text-lg">
                    Explore a visual journey with our AI-Powered gallery, showcasing captivating images generated by
                    DALL-E through prompts from our vibrant community.
                </p>

                <div className="mt-16">
                    <Form
                        labelName="Search images"
                        type="text"
                        name="search"
                        placeholder="Search images"
                        value={searchText}
                        handleChange={handleSearchChange}
                    />
                </div>

                <div className="mt-16 mb-5">
                    {loading ? (
                        <div className="flex items-center justify-center">Loading...</div>
                    ) : (
                        <>
                            {searchText && (
                                <h2 className="my-5 text-2xl font-bold ">
                                    Showing results of: <span className="text-accent">{searchText}</span>
                                </h2>
                            )}

                            <div className="grid grid-cols-1 gap-4 lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2">
                                {searchText ? (
                                    <RenderCards data={searchResults} title="No search results found." />
                                ) : (
                                    <RenderCards data={posts} title="No posts found." />
                                )}
                            </div>
                        </>
                    )}
                </div>
            </div>
        </Container>
    );
}

RenderCards.propTypes = {
    data: PropTypes.array,
    title: PropTypes.string,
};
